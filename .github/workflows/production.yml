name: Deploy to Azure

on:
  push:
    branches:
      - main

env:
  AZURE_RESOURCE_GROUP: 'fpl-league-tracker'
  AZURE_LOCATION: 'Australia East'
  AZURE_SERVER_NAME: 'fpl-league-tracker'
  AZURE_DATABASE_NAME: 'FPL'
  AZURE_STORAGE_ACCOUNT_NAME: 'fplleaguetrackerstorage'
  AZURE_FUNCTION_PLAN_NAME: 'fpl-league-tracker-function-plan'
  AZURE_DATABASE_DEPLOY_FUNCTION_NAME: 'fpl-league-tracker-database-deploy'
  AZURE_UPDATER_FUNCTION_NAME: 'fpl-league-tracker-updater'
  AZURE_API_NAME: 'fpl-league-tracker-api'
  FPL_BASE_URL: 'https://fantasy.premierleague.com/api/'
  
jobs:
  build-and-test:
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install LocalDB
        shell: pwsh
        run: |
          Write-Host "Downloading"
          Invoke-WebRequest -Uri 'https://download.microsoft.com/download/7/c/1/7c14e92e-bdcb-4f89-b7cf-93543e7112d1/SqlLocalDB.msi' -OutFile 'SqlLocalDB.msi'
          Write-Host "Installing"          
          chmod +x SqlLocalDB.msi
          Start-Process -FilePath "SqlLocalDB.msi" -Wait -ArgumentList "/qn", "/norestart", "/l*v SqlLocalDBInstall.log", "IACCEPTSQLLOCALDBLICENSETERMS=YES";
          Write-Host "Checking"
          sqlcmd -l 300 -S "(localdb)\MSSQLLocalDB" -Q "SELECT @@VERSION;"

      - name: Run Unit Tests
        shell: pwsh
        run: |
          pushd './FPLV2.UnitTests'
          dotnet test --logger "console;verbosity=normal" --configuration Release
          popd


  deploy-to-azure:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Azure Resources
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          template: ./FPLV2.ArmTemplates/azure-deploy.json
          parameters: serverName="${{ env.AZURE_SERVER_NAME }}" sqlDBName="${{ env.AZURE_DATABASE_NAME }}" location="${{ env.AZURE_LOCATION }}" administratorLogin="${{ vars.AZURE_DATABASE_USERNAME }}" administratorLoginPassword="${{ secrets.AZURE_DATABASE_PASSWORD }}" storageAccountName="${{ env.AZURE_STORAGE_ACCOUNT_NAME }}" functionPlanName="${{ env.AZURE_FUNCTION_PLAN_NAME }}" databaseDeployFunctionName="${{ env.AZURE_DATABASE_DEPLOY_FUNCTION_NAME }}" updaterFunctionName="${{ env.AZURE_UPDATER_FUNCTION_NAME }}" apiName="${{ env.AZURE_API_NAME }}"

      - name: Building Database Deploy Azure Function
        shell: pwsh
        run: |
          pushd './FPLV2.DatabaseDeploy'
          dotnet build --configuration Release --output ./output
          popd
      
      - name: Updating Database Deploy Azure Function
        uses: azure/functions-action@v1
        with:
          app-name: ${{ env.AZURE_DATABASE_DEPLOY_FUNCTION_NAME }}
          package: './FPLV2.DatabaseDeploy/output'

      - name: Set Environment Variables for created Azure Resources
        run: |
          echo "DATABASE_DEPLOY_URL=$(az functionapp show --name "${{ env.AZURE_DATABASE_DEPLOY_FUNCTION_NAME }}" --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" --query defaultHostName --output tsv)" >> $GITHUB_ENV
          echo "DATABASE_DEPLOY_KEY=$(az functionapp function keys list --name "${{ env.AZURE_DATABASE_DEPLOY_FUNCTION_NAME }}" --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" --function-name "DeployFunction" --query default --output tsv)" >> $GITHUB_ENV
          echo "DATABASE_SERVER_NAME=$(az sql server show --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" --name "${{ env.AZURE_SERVER_NAME }}" --query "fullyQualifiedDomainName" --output tsv)" >> $GITHUB_ENV
          connectionString=$(az sql db show-connection-string --name "${{ env.AZURE_DATABASE_NAME }}" --server "${{ env.AZURE_SERVER_NAME }}" --client ado.net --output tsv)
          connectionString="${connectionString/<username>/${{ vars.AZURE_DATABASE_USERNAME }}}" 
          connectionString="${connectionString/<password>/${{ secrets.AZURE_DATABASE_PASSWORD }}}"
          echo "DATABASE_CONNECTION_STRING=$connectionString" >> $GITHUB_ENV
          echo "API_URL=https://$(az webapp show --name "${{ env.AZURE_API_NAME }}" --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" --query defaultHostName --output tsv)" >> $GITHUB_ENV

      - name: Execute Database Deploy Azure Function
        shell: pwsh
        run: |
          $url="https://${{ env.DATABASE_DEPLOY_URL }}/api/DeployFunction?code=${{ env.DATABASE_DEPLOY_KEY }}"
          $body= @{
            databaseServerName = "${{ env.DATABASE_SERVER_NAME }}"
            databaseName = "${{ env.AZURE_DATABASE_NAME }}"
            databaseAdminUserName = "${{ vars.AZURE_DATABASE_USERNAME }}"
            databaseAdminPassword = "${{ secrets.AZURE_DATABASE_PASSWORD }}"
          } | ConvertTo-Json
          Invoke-RestMethod -Uri $url -Method Post -Body $body -ContentType "application/json"
      
      - name: Update Environment Variables for Updater Azure Function
        run: |
          az webapp config connection-string set --name "${{ env.AZURE_UPDATER_FUNCTION_NAME }}" --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" --connection-string-type SQLAzure --settings DefaultConnection="${{ env.DATABASE_CONNECTION_STRING }}"
          az functionapp config appsettings set --name "${{ env.AZURE_UPDATER_FUNCTION_NAME }}" --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" --settings "FplBaseUrl=${{ env.FPL_BASE_URL }}"

      - name: Building Updater Azure Function
        shell: pwsh
        run: |
          pushd './FPLV2.Updater'
          dotnet build --configuration Release --output ./output
          popd
      
      - name: Updating Updater Azure Function
        uses: azure/functions-action@v1
        with:
          app-name: ${{ env.AZURE_UPDATER_FUNCTION_NAME }}
          package: './FPLV2.Updater/output'          
          
      - name: Publishing API Web App
        shell: pwsh
        run: |
          pushd './FPLV2.Api'
          dotnet publish --configuration Release --output ./output
          popd

      - name: Updating API Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_API_NAME }}
          package: './FPLV2.Api/output'          

      - name: Update Environment Variables for API Web App
        run: |
          az webapp config connection-string set --name "${{ env.AZURE_API_NAME }}" --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" --connection-string-type SQLAzure --settings DefaultConnection="${{ env.DATABASE_CONNECTION_STRING }}"
          az webapp config appsettings set --name "${{ env.AZURE_API_NAME }}" --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" --settings "FplBaseUrl=${{ env.FPL_BASE_URL }}"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 21
  
      - name: Build Angular Website
        shell: pwsh      
        run: |
          pushd './FPLV2.Website/src'
          $content = Get-Content -Path .\config.ts -Raw
          $pattern = 'apiUrl: ''(.*?)'''
          $newApiUrl = '${{ env.API_URL }}'
          $newContent = $content -replace $pattern, "apiUrl: '$newApiUrl'"
          Set-Content -Path .\config.ts -Value $newContent
          cd ../
          npm install
          npm run build
          popd

      - name: Updating Website Azure Static Web App
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_WEBSITE_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "FPLV2.Website/dist/fplv2.website"
          output_location: ""
          skip_app_build: true
          skip_api_build: true
      